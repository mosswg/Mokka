/* DO NOT EDIT THIS FILE - it is machine generated */
#include <Java/include/jni.h>
#include <GLEW/include/GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <iostream>
#include <fstream>
#include <string>
#include <cmath>
#include <algorithm>
#include <sstream>

#include "mka_VertexArray.h"
#include "mka_Shader.h"
#include "mka_Renderer.h"
#include "mka_Texture.h"
#include "mka_Shape.h"






/* Header for class Mokka_Internal */


#ifndef _Included_Mokka_Internal
#define _Included_Mokka_Internal



  void validateInstance();

#ifdef __cplusplus
extern "C" {
#endif



void key_callback(GLFWwindow*, int, int, int, int);

int getKeyArrayLocation(int);

void OpenGlLogMessageCallback(GLenum,
            GLenum,
            GLuint,
            GLenum,
            GLsizei,
            const GLchar* ,
            const void*);





/*
 * Class:     Mokka_Init
 * Method:    initWindow
 * Signature: (IILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Mokka_Init_initWindow
  (JNIEnv *, jclass, jint, jint, jstring);



  void WindowDVD(GLFWwindow*, int, int);



/*
* Class:     Mokka_Internal
* Method:    setWindowCoordsOrtho
* Signature: (FFFF)V
*/
JNIEXPORT void JNICALL Java_Mokka_Internal_setWindowCoordsOrtho
    (JNIEnv*, jclass, jfloat, jfloat, jfloat, jfloat);


/*
 * Class:     Mokka_Internal
 * Method:    genShaderRID
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Mokka_Internal_genShaderRID
  (JNIEnv *, jclass, jstring);


/*
 * Class:     Mokka_Internal
 * Method:    clearWindow
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Mokka_Internal_clearWindow
  (JNIEnv *, jclass);


    /*
* Class:     Mokka_Internal
* Method:    getKeyState
* Signature: (I)I
*/
    JNIEXPORT jint JNICALL Java_Mokka_Internal_getKeyState
    (JNIEnv*, jclass, jint keyCode);


      /*
* Class:     Mokka_Internal
* Method:    keyIsPressed
* Signature: (I)Z
*/
    JNIEXPORT jboolean JNICALL Java_Mokka_Internal_keyIsPressed
    (JNIEnv*, jclass, jint keyCode);

            /*
* Class:     Mokka_Internal
* Method:    keyIsPressedOrHeld
* Signature: (I)Z
*/
    JNIEXPORT jboolean JNICALL Java_Mokka_Internal_keyIsPressedOrHeld
    (JNIEnv*, jclass, jint keyCode);

                /*
* Class:     Mokka_Internal
* Method:    keyIsHeld
* Signature: (I)Z
*/
    JNIEXPORT jboolean JNICALL Java_Mokka_Internal_keyIsHeld
    (JNIEnv*, jclass, jint keyCode);


            /*
* Class:     Mokka_Internal
* Method:    keyIsReleased
* Signature: (I)Z
*/
    JNIEXPORT jboolean JNICALL Java_Mokka_Internal_keyIsReleased
    (JNIEnv*, jclass, jint keyCode);

/*
 * Class:     Mokka_Internal
 * Method:    windowShouldClose
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_Mokka_Internal_windowShouldClose
  (JNIEnv *, jclass);

  /*
 * Class:     Mokka_Internal
 * Method:    moveWindow
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_Mokka_Internal_setWindowPos
  (JNIEnv* , jclass, jint, jint);


/*
 * Class:     Mokka_Internal
 * Method:    pollAndSwap
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Mokka_Internal_pollAndSwap
  (JNIEnv *, jclass);

/*
 * Class:     Mokka_Internal
 * Method:    terminate
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Mokka_Internal_terminate
  (JNIEnv *, jclass);

/*
 * Class:     Mokka_Internal
 * Method:    getCallingClass
 * Signature: (Ljava/lang/StackTraceElement;)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL Java_Mokka_Internal_getCallingClass
  (JNIEnv *, jclass, jobject);
  
void rendererClear();

#ifdef __cplusplus
}
#endif
#endif
