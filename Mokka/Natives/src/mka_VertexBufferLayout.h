/* DO NOT EDIT THIS FILE - it is machine generated */
#include <Java/include/jni.h>
/* Header for class moss_mokka_VertexBuffer_Layout */

#ifndef _Included_moss_mokka_VertexBuffer_Layout
#define _Included_moss_mokka_VertexBuffer_Layout


#include <vector>
#include "mka_Renderer.h"


	static unsigned int GetSizeOfType(unsigned int type) {
		switch (type) {
			case GL_FLOAT: return sizeof(float);
			case GL_UNSIGNED_INT: return sizeof(unsigned int);
			case GL_UNSIGNED_BYTE: return sizeof(unsigned char);
		}
		return 0;
		
	}

struct VertexBufferElement
{
	unsigned int type;
	unsigned int count;
	unsigned int normalized;

};
	class VertexBufferLayout {
private:
		std::vector<VertexBufferElement> m_Elements;
		unsigned int m_Stride;


public:
	VertexBufferLayout()
	:m_Stride(0) {}
	
	void Push(int type, uint32_t count) {
		switch(type) {
			
			case 1:
				m_Elements.push_back({ GL_UNSIGNED_INT, count, GL_TRUE });
				m_Stride += count * GetSizeOfType(GL_UNSIGNED_INT);
				return;
			case 2:
				m_Elements.push_back({ GL_UNSIGNED_BYTE, count, GL_TRUE });
				m_Stride += count * GetSizeOfType(GL_UNSIGNED_BYTE);
				return;			
			case 3:
				m_Elements.push_back({ GL_FLOAT, count, GL_FALSE });
				m_Stride += count * GetSizeOfType(GL_FLOAT);
				return;
			default:
				printf("Invalid Type Given\n");
				exit(-4);



        }
	}


	inline const std::vector<VertexBufferElement> GetElements() const& { return m_Elements; }
	inline unsigned int GetStride() const { return m_Stride;}

	};

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     moss_mokka_VertexBuffer_Layout
 * Method:    CreateVertexBufferLayout
 * Signature: ()J
 */
JNIEXPORT jint JNICALL Java_Mokka_VertexBuffer_00024Layout_CreateVertexBufferLayout
  (JNIEnv *, jclass);

/*
 * Class:     moss_mokka_VertexBuffer_Layout
 * Method:    push
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_Mokka_VertexBuffer_00024Layout_push
  (JNIEnv *, jobject, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
